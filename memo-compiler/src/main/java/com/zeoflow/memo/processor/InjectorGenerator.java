/*
 * Copyright (C) 2017 zeoflow
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.zeoflow.memo.processor;

import androidx.annotation.NonNull;

import com.google.common.base.VerifyException;
import com.zeoflow.jx.file.ClassName;
import com.zeoflow.jx.file.MethodSpec;
import com.zeoflow.jx.file.ParameterSpec;
import com.zeoflow.jx.file.TypeName;
import com.zeoflow.jx.file.TypeSpec;
import com.zeoflow.memo.annotation.Encoder;
import com.zeoflow.memo.annotation.InjectPreference;
import com.zeoflow.memo.annotation.IMemoStorageImpl;

import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.Elements;

import static javax.lang.model.element.Modifier.PUBLIC;

@SuppressWarnings("WeakerAccess")
public class InjectorGenerator
{

    private static final String CLAZZ_PREFIX = "_Injector";
    private static final String INJECT_OBJECT = "injectObject";
    private static final String PREFERENCE_PREFIX = "_MemoEntity";
    private static final String COMPONENT_PREFIX = "_Memo";

    private final PreferenceComponentAnnotatedClass annotatedClazz;
    private final TypeElement injectedElement;
    public String packageName;

    public InjectorGenerator(
            @NonNull PreferenceComponentAnnotatedClass annotatedClass,
            @NonNull TypeElement injectedElement,
            @NonNull Elements elementUtils)
    {
        this.annotatedClazz = annotatedClass;
        this.injectedElement = injectedElement;
        PackageElement packageElement = elementUtils.getPackageOf(injectedElement);
        this.packageName =
                packageElement.isUnnamed() ? null : packageElement.getQualifiedName().toString();
    }

    public TypeSpec generate()
    {
        return TypeSpec.classBuilder(getClazzName())
                .addJavadoc("Injector Class for $T\n", TypeName.get(injectedElement.asType()))
                .addJavadoc("Generated by IStorage (https://github.com/zeoflow/storage).\n")
                .addModifiers(PUBLIC)
                .addSuperinterface(IMemoStorageImpl.class)
                .superclass(TypeName.get(injectedElement.asType()))
                .addMethod(getConstructorSpec())
                .build();
    }

    public MethodSpec getConstructorSpec()
    {
        MethodSpec.Builder builder =
                MethodSpec.constructorBuilder()
                        .addModifiers(PUBLIC)
                        .addParameter(
                                ParameterSpec.builder(TypeName.get(injectedElement.asType()), INJECT_OBJECT)
                                        .addAnnotation(NonNull.class)
                                        .build()
                        );
        injectedElement.getEnclosedElements().stream()
                .filter(variable -> variable instanceof VariableElement)
                .map(variable -> (VariableElement) variable)
                .forEach(
                        variable ->
                        {
                            if (variable.getAnnotation(InjectPreference.class) != null)
                            {
                                String annotatedFieldName = TypeName.get(variable.asType()).toString();
                                if (annotatedFieldName.contains(".") || annotatedFieldName.contains("\\."))
                                {
                                    String encodedString = Encoder.encodeUtf8(annotatedFieldName);
                                    String[] typedArray = encodedString.split("\\.");
                                    annotatedFieldName = typedArray[typedArray.length - 1];
                                }

                                ClassName componentClazz = ClassName.get(
                                        annotatedClazz.packageName,
                                        annotatedClazz.clazzName + COMPONENT_PREFIX
                                );
                                if (annotatedClazz.generatedClazzList.contains(annotatedFieldName))
                                {
                                    String className = StringUtils.toLowerCamel(annotatedFieldName.replace(PREFERENCE_PREFIX, ""));
                                    builder.addStatement(
                                            INJECT_OBJECT + ".$N = $T.getInstance().$N()",
                                            variable.getSimpleName(),
                                            componentClazz,
                                            className
                                    );
                                } else if ((annotatedClazz.clazzName + COMPONENT_PREFIX)
                                        .equals(annotatedFieldName))
                                {
                                    builder.addStatement(
                                            INJECT_OBJECT + ".$N = $T.getInstance()",
                                            variable.getSimpleName(),
                                            componentClazz
                                    );
                                } else
                                {
                                    throw new VerifyException(String.format(
                                            "'%s' type can not be injected",
                                            variable.getSimpleName() + " " + variable.asType()
                                    ));
                                }
                            }
                        });

        return builder.build();
    }

    private String getClazzName()
    {
        return injectedElement.getSimpleName() + CLAZZ_PREFIX;
    }

}
